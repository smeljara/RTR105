#include<stdio.h>
#include<string.h>
  
void sort(char txt[], int n);
void sortc(char txt[], char txtc[], int n);
void arithmetic_mean(char txtc[], int n);
void median (int g, char txtc[]);
void mode (char txtc[], int g);
void simb(char txtc[], int g);


int main()
{   
    int n, g, f=0;
    float m;
    char txt[50], txtc[100]={0};
    printf("Ievadi simbolus vai tekstu.\n");
    fgets(txt, sizeof(txt), stdin);
    printf("Jūsu simbolu rinda:\n");
    puts(txt);
    n = strlen(txt);
    sort(txt, n);
    printf("Sakārtots augošā secībā: ");
    puts(txt);
    printf("\n");
    
    sortc(txt, txtc, n);
    printf("Sakārtots augošā secībā bez punktuācijas un atstarpes: \n");
    puts(txtc);
    printf("\n");
    
    g = strlen(txtc);
    median(g, txtc);
    mode(txtc, g);
    printf("Minimala vērtība = %d, apzimejums = %c\n", txtc[0], txtc[0]);
    printf("Maksimala vērtība  = %d, apzimejums = %c\n\n", txtc[g-1], txtc[g-1]);
    arithmetic_mean(txtc, g);
    simb(txtc, g);
    
    return 0;
}

void sort(char txt[], int n)
{
   int i, j;
   char temp;
   for (i = 0; i < n-1; i++)      
  
       
       for (j = 0; j < n-i-1; j++) 
           if (txt[j] > txt[j+1])
           {
              temp = txt[j];
              txt[j] = txt[j+1];
              txt[j+1] = temp;
           }
}

void sortc(char txt[], char txtc[], int n)
{   
    int i, j=0;
    for(i=0;i<n; i++)
        {
            if(((txt[i]>=48) && (txt[i]<= 57)) || ((txt[i]>=65) && (txt[i]<=90)) || ((txt[i]>=97) && (txt[i]<=122)))
            {
                txtc[j] = txt[i];
                j++;
            }
        }
}

void arithmetic_mean(char txtc[], int g)
{   

    int i;
    float m = 0;
    for(i=0; i<g; i++)
    {
       m += txtc[i]; 
    }
    m = m/g;
    printf("Videja vērtība = %.2lf\n", m);
    printf("\n");
}

void median (int g, char txtc[])
{   
    int t;   
    if(g%2 == 0)
    {
        t = g/2;
        printf("Mediana atrodas starp %c un %c | ", txtc[t-1], txtc[t]);
        printf("starp %d un %d simbolu pēc kārtas\n", t, t+1);
    }
    else
    {
        t = g/2;
        printf("Mediana ir simbols - %c | ", txtc[t]);
        printf("%d - pēc kārtas\n", t+1);
        
    }
    printf("\n");
    
}

void mode (char txtc[], int g)
{
    int count0 = 0, c = 0, a0 = 0, a1 = 0, b0 = 0, i;
    char sim[100] = {0}, b1;
    int count[100];
    for(i=0;i<g;i++)
    {
        a0 = txtc[i];
        a1 = txtc[i+1];
        if(a0 == a1)
        {
            count0++;
        }
        if(a0 != a1)
        {
            count0++;
            if(b0 <= count0)
            {
                b0 = count0;
                b1 = txtc[i];
            }
            count[c] = count0;
            count0 = 0;
            sim[c] = txtc[i];
            c++;
        }

    }

    for(i=0;i<c;i++)
    {
        printf("%c-%d; ", sim[i], count[i]);
    }
    printf("\n");
    printf("Moda ir simbols - %c : atkartošanas skaits - %d  (Gadījumā, ja pastāv citi simboli ar tādu pašu atkārtošanās skaitu - rāda pēdēju)\n", b1, b0);
    printf("\n");
}

void simb(char txtc[], int g)
{
    int i;
    printf("Cipari: ");
    for(i=0;i<g; i++)
    {
        if((txtc[i]>=48) && (txtc[i]<=57))
        {
            printf("%c ", txtc[i]);
        }
    }
    printf("\n");
    printf("Burti: ");
    for(i=0;i<g;i++)
    {
        if(((txtc[i]>=65) && (txtc[i]<=90)) || ((txtc[i]>=97) && (txtc[i]<=122)))
        {
            printf("%c ", txtc[i]);
        }   
    }
    printf("\n");
}
